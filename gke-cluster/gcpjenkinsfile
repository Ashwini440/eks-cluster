pipeline {
    agent any
    environment {
    M2_HOME = " /opt/apache-maven-3.9.9"
    PATH="$M2_HOME/bin:$PATH"
    TF_VERSION = '1.10.5'
    TF_PATH = '/usr/bin/terraform'
    
    }
 
      stages {
        stage('git checkout') {
            steps {
                   git 'https://github.com/Ashwini440/DevOps.git' 
                          }
        }
        stage('mvn build') {
            steps {
                 sh 'mvn clean package'
           }
        }
        stage('docker image build') {
            steps {
                sh 'docker build -t ocean .'
            }
        }
       // stage('docker container create') {
       //     steps {
       //         sh 'docker run --network host -d --name sekhar4 --memory=1g sekhar4'
        //    }
       // }
        stage('image pushing to docker hub') {
            steps {
                withDockerRegistry(credentialsId: 'docker-hub-cred', url: 'https://index.docker.io/v1/') {
                    sh 'docker tag ocean asamaswini/ocean:v2'
                    sh 'docker push asamaswini/ocean:v2'   // some block
                }
            }
        }
        stage('gke-cluster provisioning with terraform') {
            steps {
                withCredentials([file(credentialsId: 'terra-gcp-cluster-svc-cred', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                sh 'terraform init'
                sh 'terraform apply --auto-approve'
                }
            }
        }
        

        stage('Authenticate with GCP') {
            steps {
                withCredentials([file(credentialsId: 'gke-cred', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                        # Authenticate with Google Cloud
                        echo "Using credentials from: $GOOGLE_APPLICATION_CREDENTIALS"
                        gcloud auth activate-service-account --key-file=key.json
                        
                        # Retrieve GKE credentials (IMPORTANT)
                        gcloud container clusters get-credentials marvel --region us-west3-c
                        
                        # Verify authentication
                        kubectl config view
                        kubectl cluster-info
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl apply -f deployment.yaml'
                 sh 'kubectl apply -f Deployment.yml'
            }
        }
        stage('Deploy wrong image to Kubernetes ') {
             steps {
                    script {
                         def deployStatus = sh(script: "kubectl apply -f Deployment.yml", returnStatus: true)
                         if (deployStatus != 0) {
                         echo "Deployment failed! Rolling back to v1..."
                         sh "kubectl rollout undo deployment ocean-v2"
            }
        }
    }
}

   }
}
